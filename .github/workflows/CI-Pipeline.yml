#name: CI/CD Pipeline (App Runner)
#
#on:
#  push:
#    branches: [ main ]
#
#jobs:
#  build-and-push:
#    runs-on: ubuntu-latest
#
#    defaults:
#      run:
#        working-directory: vitanova-backend
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Set up Java 17
#        uses: actions/setup-java@v4
#        with:
#          distribution: temurin
#          java-version: '17'
#          cache: maven
#
#      - name: Configure AWS credentials (static keys)
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region:            us-east-2
#
#      - name: Who am I?
#        run: aws sts get-caller-identity
#
#      - name: Login to Amazon ECR
#        id: ecr
#        uses: aws-actions/amazon-ecr-login@v2
#        # no 'registries:' needed; it uses the current account
#
#      - name: Ensure mvnw is executable (and LF)
#        run: |
#          sed -i 's/\r$//' mvnw || true
#          chmod +x mvnw
#
#      - name: Build Spring Boot JAR
#        run: ./mvnw -q -B -U clean package -DskipTests
#
#      - name: Build & push Docker image (:prod only)
#        env:
#          ECR_REGISTRY:  ${{ steps.ecr.outputs.registry }}
#          ECR_REPOSITORY: vitanova-backend
#          JAR_FILE:      target/vitanova-backend-0.0.1-SNAPSHOT.jar
#        run: |
#          docker build --build-arg JAR_FILE="$JAR_FILE" \
#            -t "$ECR_REGISTRY/$ECR_REPOSITORY:prod" .
#          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:prod"
#


name: CI/CD Pipeline (App Runner)

on:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-2
      SERVICE_ARN: ${{ secrets.SERVICE_ARN }}   # optional; leave unset to skip update

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Who am I?
        run: aws sts get-caller-identity

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push (multi-stage Dockerfile)
        uses: docker/build-push-action@v6
        with:
          context: ./vitanova-backend
          file: ./vitanova-backend/Dockerfile
          push: true
          tags: |
            ${{ steps.ecr.outputs.registry }}/vitanova-backend:prod
            ${{ steps.ecr.outputs.registry }}/vitanova-backend:latest
            ${{ steps.ecr.outputs.registry }}/vitanova-backend:sha-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Optional: point App Runner at :prod and trigger deploy
      - name: Update App Runner to :prod
        if: ${{ env.SERVICE_ARN != '' }}
        env:
          ECR_REGISTRY: ${{ steps.ecr.outputs.registry }}
        run: |
          aws apprunner update-service \
            --service-arn "$SERVICE_ARN" \
            --source-configuration "{
              \"ImageRepository\": {
                \"ImageIdentifier\": \"${ECR_REGISTRY}/vitanova-backend:prod\",
                \"ImageRepositoryType\": \"ECR\",
                \"ImageConfiguration\": { \"Port\": \"8080\" }
              },
              \"AutoDeploymentsEnabled\": true
            }"
          aws apprunner start-deployment --service-arn "$SERVICE_ARN"
